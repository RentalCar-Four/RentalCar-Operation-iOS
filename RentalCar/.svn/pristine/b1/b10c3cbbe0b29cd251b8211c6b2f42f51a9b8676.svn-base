//
//  HomeMapView.m
//  RentalCar
//
//  Created by zhanbing han on 17/3/26.
//  Copyright © 2017年 xyx. All rights reserved.
//

#import "HomeMapView.h"
#import <AMapSearchKit/AMapSearchKit.h>
#import "MAAnnotationView+RotateWithHeading.h"
#import "ErrorInfoUtility.h"
#import "CommonUtility.h"
#import "CarPointAnnotation.h"
#import "LocationTransform.h"
#import "CommonRequest.h"
#import "UrlConfig.h"
#import "CarItem.h"

@interface HomeMapView ()<MAMapViewDelegate,AMapLocationManagerDelegate,AMapSearchDelegate>
{
    //高德地图
    AMapSearchAPI *_search; //搜索
    AMapWalkingRouteSearchRequest *_navi; //步行路径规划
    AMapRoute *_route; //路线
    CLLocationCoordinate2D _startCoordinate; /* 起始点经纬度. */
    CLLocationCoordinate2D _destinationCoordinate; /* 终点经纬度. */
    CLLocationCoordinate2D _centerCoordinate; /* 中心点经纬度. */
    
    //数据源
    NSMutableArray *_carAnnoArr; //网点标注
    NSMutableDictionary *_carSelectedAnnoDic; //选中车标注
    BOOL isShowCar;
}
@end

@implementation HomeMapView

- (instancetype)initWithFrame:(CGRect)frame{
    
    if (self = [super initWithFrame:frame]) {
        
        _carAnnoArr = [NSMutableArray array];
        _carSelectedAnnoDic = [NSMutableDictionary dictionary];
        
        [self setUp];
    }
    
    return  self;
}

- (void)setUp {
    
    self.frame = CGRectMake(0, 64, kScreenWidth, kScreenHeight-64);
    
    //地图需要v4.5.0及以上版本才必须要打开此选项（v4.5.0以下版本，需要手动配置info.plist）
    [AMapServices sharedServices].enableHTTPS = YES;
    
    _mapView = [[MAMapView alloc] initWithFrame:CGRectMake(0, 0, kScreenWidth, kScreenHeight-64)];
    _mapView.delegate = self;
    _mapView.showsCompass = NO; //隐藏指南针
    _mapView.showsScale = YES; //隐藏比例尺
    _mapView.rotateEnabled= NO; //禁止地图旋转
    _mapView.rotateCameraEnabled= NO; //禁止地图倾斜
    [self addSubview:_mapView];
    
    //自定义地图样式
    NSString *path = [NSString stringWithFormat:@"%@/style_json.json", [NSBundle mainBundle].bundlePath];
    NSData *data = [NSData dataWithContentsOfFile:path];
    [_mapView setCustomMapStyle:data];
    
    //开启定位
    _mapView.showsUserLocation = YES;
    [_mapView setUserTrackingMode: MAUserTrackingModeFollow animated:YES]; //地图跟着位置移动
    
    //创建定位管理者
    _locationManager = [[AMapLocationManager alloc] init];
    _locationManager.delegate = self;
    [self setLocationManagerForHundredMeters]; //百米精确度
    //开始定位
    [_locationManager startUpdatingLocation];
    
    //搜索
    _search = [[AMapSearchAPI alloc] init];
    _search.delegate = self;
    
    _navi = [[AMapWalkingRouteSearchRequest alloc] init];
    
    //提示视图
    _tipView = [[UIView alloc] initWithFrame:CGRectMake(0, -64, kScreenWidth, autoScaleH(30))];
    _tipView.backgroundColor = UIColorFromARGB(0xFF8476, 0.9);
    [APPUtil setViewShadowStyle:_tipView];
    _tipView.alpha = 0;
    
    UIImageView *iconView = [[UIImageView alloc] initWithFrame:CGRectMake(autoScaleW(10), autoScaleH(7), autoScaleW(16), autoScaleW(16))];
    iconView.image = [UIImage imageNamed:@"icon_err"];
    [_tipView addSubview:iconView];
    
    _tipTitleLab = [[UILabel alloc] initWithFrame:CGRectMake(autoScaleW(36), 0, kScreenWidth-autoScaleW(50), _tipView.height)];
    _tipTitleLab.text = @"无法连接服务器，请检查您的网络。";
    _tipTitleLab.font = [UIFont systemFontOfSize:autoScaleW(12)];
    _tipTitleLab.textColor = [UIColor whiteColor];
    [_tipView addSubview:_tipTitleLab];
    
    [_mapView addSubview:_tipView];
    
    //扫码用车
    _scanUseCarBtn = [[UIButton alloc] initWithFrame:CGRectMake(kScreenWidth/2-autoScaleW(140)/2, _mapView.height-autoScaleW(64), autoScaleW(140), autoScaleW(44))];
    [[APPUtil share] setButtonClickStyle:_scanUseCarBtn Shadow:YES normalBorderColor:0 selectedBorderColor:0 BorderWidth:0 normalColor:kBlueColor selectedColor:UIColorFromRGB(0x09C58A) cornerRadius:autoScaleW(10)];
    [_scanUseCarBtn setImage:[UIImage imageNamed:@"icon_Scan"] forState:UIControlStateNormal];
    [_scanUseCarBtn setImage:[UIImage imageNamed:@"icon_Scan"] forState:UIControlStateHighlighted];
    [_scanUseCarBtn setTitle:@"扫码用车" forState:UIControlStateNormal];
    [_scanUseCarBtn.titleLabel setFont:[UIFont systemFontOfSize:autoScaleW(16)]];
    [_scanUseCarBtn setImageEdgeInsets:UIEdgeInsetsMake(0.0, -autoScaleW(22), 0.0, 0.0)];
    [_scanUseCarBtn setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 0.0, 0.0, -autoScaleW(15))];
    [_scanUseCarBtn addTarget:self action:@selector(scanUseCar) forControlEvents:UIControlEventTouchUpInside];
    [_mapView addSubview:_scanUseCarBtn];
    
    //定位
    _locationBtn = [[UIImageView alloc] initWithFrame:CGRectMake(kScreenWidth-autoScaleW(64), _mapView.height-autoScaleH(64), autoScaleW(44), autoScaleW(44))];
    _locationBtn.contentMode = UIViewContentModeScaleAspectFit;
    _locationBtn.image = [UIImage imageNamed:@"icon_Location"];
    _locationBtn.backgroundColor = [UIColor whiteColor];
    [_locationBtn.layer setCornerRadius:autoScaleW(10.0)];
    [APPUtil setViewShadowStyle:_locationBtn];
    [_mapView addSubview:_locationBtn];
    
    _clickLocateBtn = [[UIButton alloc] initWithFrame:_locationBtn.frame];
    [_clickLocateBtn addTarget:self action:@selector(location) forControlEvents:UIControlEventTouchUpInside];
    _clickLocateBtn.backgroundColor = [UIColor clearColor];
    [_clickLocateBtn addTarget:self action:@selector(location) forControlEvents:UIControlEventTouchUpInside];
    [_mapView addSubview:_clickLocateBtn];
}

#pragma mark - methods

//扫码用车
- (void)scanUseCar {
    
    _scanUseCarBtn.backgroundColor = kBlueColor;
    [_scanUseCarBtn.layer setMasksToBounds:NO];
    
    if ([self.delegate respondsToSelector:@selector(onClickWithScanUseCarEvent)]) {
        [self.delegate onClickWithScanUseCarEvent];
    }
}

//定位
- (void)location {
    
    //设置地图中心点
    [_mapView setCenterCoordinate:_userLocation.coordinate animated:YES];
    
    //开始定位
    [_locationManager startUpdatingLocation];
}

#pragma mark - mapView 代理方法

//定位结果回调
- (void)amapLocationManager:(AMapLocationManager *)manager didUpdateLocation:(CLLocation *)location {
    // 定位结果
    NSLog(@"location:{lat:%f; lon:%f; accuracy:%f}", location.coordinate.latitude, location.coordinate.longitude, location.horizontalAccuracy);
    //更新用户位置
    _userLocation = location;
    //设置地图中心点
    [_mapView setCenterCoordinate:_userLocation.coordinate animated:YES];
    
    //反地理编码出地理位置
    AMapReGeocodeSearchRequest *regeo = [[AMapReGeocodeSearchRequest alloc] init];
    regeo.location = [AMapGeoPoint locationWithLatitude:_userLocation.coordinate.latitude longitude:_userLocation.coordinate.longitude];
    regeo.requireExtension =YES;
    //发起逆地理编码
    [_search AMapReGoecodeSearch:regeo];
    
    // 停止定位
    [_locationManager stopUpdatingLocation];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [_mapView setZoomLevel:17 animated:YES];
    });
    
    LocationTransform *beforeLocation = [[LocationTransform alloc] initWithLatitude:_userLocation.coordinate.latitude andLongitude:_userLocation.coordinate.longitude];
    //高德转化为GPS
    LocationTransform *afterLocation = [beforeLocation transformFromGDToGPS];
    
    if ([self.delegate respondsToSelector:@selector(locationSuccess:withRadius:)]) {
        [self.delegate locationSuccess:afterLocation withRadius:self.stationRadius];
    }
    
        //创建大头针
//        if (!_anno) {
//            [_mapView removeAnnotation:_anno];
//            _anno = [[CarPointAnnotation alloc] init];
//            _anno.coordinate = CLLocationCoordinate2DMake(_userLocation.coordinate.latitude,_userLocation.coordinate.longitude);
//            //将大头针添加到地图中
//            [_mapView addAnnotation:_anno];
//        }
}

//当位置(经纬度/方向)更新时，会进行定位回调
- (void)mapView:(MAMapView *)mapView didUpdateUserLocation:(MAUserLocation *)userLocation
updatingLocation:(BOOL)updatingLocation
{
    if(updatingLocation)
    {
        //取出当前位置的坐标
        //NSLog(@"latitude : %f,longitude: %f",userLocation.coordinate.latitude,userLocation.coordinate.longitude);
        
                //创建大头针
//                if (!_anno) {
//                    [_mapView removeAnnotation:_anno];
//                    _anno = [[CarPointAnnotation alloc] init];
//                    _anno.coordinate = CLLocationCoordinate2DMake(userLocation.coordinate.latitude,userLocation.coordinate.longitude);
//                    //将大头针添加到地图中
//                    [_mapView addAnnotation:_anno];
//                }
        
        //更新用户位置
        _userLocation = userLocation.location;
        
        //取得用户大头针视图
        MAAnnotationView *userView = [mapView viewForAnnotation:mapView.userLocation];
        //取方向信息
        CLHeading *userHeading = userLocation.heading;
        //根据方向旋转箭头
        [userView rotateWithHeading:userHeading];
    }
}

#pragma mark - 获取区域ID

/* 逆地理编码回调. */
- (void)onReGeocodeSearchDone:(AMapReGeocodeSearchRequest *)request response:(AMapReGeocodeSearchResponse *)response {
    
    if (response.regeocode !=nil ) {
        
        NSString *province = response.regeocode.addressComponent.province;
        NSString *city = response.regeocode.addressComponent.city;
        NSString *district = response.regeocode.addressComponent.district;
        
        NSMutableDictionary *dic = [NSMutableDictionary dictionary];
        [dic setObject:province forKey:@"province"];
        [dic setObject:city forKey:@"city"];
        [dic setObject:district forKey:@"district"];
        
        NSLog(@"反向地理编码回调:%@",city);
        
        if ([self.delegate respondsToSelector:@selector(returnReGeocodeCityResult:)]) {
            [self.delegate returnReGeocodeCityResult:dic];
        }
    }
}

//单击地图
- (void)mapView:(MAMapView *)mapView didSingleTappedAtCoordinate:(CLLocationCoordinate2D)coordinate {
    
    if ([self.delegate respondsToSelector:@selector(singleTappedMapView)]) {
        [self.delegate singleTappedMapView];
    }
}

//地图区域改变完成
- (void)mapView:(MAMapView *)mapView regionDidChangeAnimated:(BOOL)animated {
    //    [_mapView removeFromSuperview];
    //    [self.view addSubview:mapView];
}

//地图缩放开始
- (void)mapView:(MAMapView *)mapView mapWillZoomByUser:(BOOL)wasUserAction {
    
    if (_stationArr.count==0||isShowCar==YES) {
        return;
    }
    _mapView.showsScale = YES; //显示比例尺
}

//地图缩放结束
- (void)mapView:(MAMapView *)mapView mapDidZoomByUser:(BOOL)wasUserAction {
    
    _mapView.showsScale = NO; //隐藏比例尺
    
    CGPoint leftTopPoint = CGPointMake(0, 0);
    CGPoint rightBottomPoint = CGPointMake(_mapView.width, _mapView.height);
    
    CLLocationCoordinate2D leftTopCoordinate = [_mapView convertPoint:leftTopPoint toCoordinateFromView:_mapView];
    CLLocationCoordinate2D rightBottomCoordinate = [_mapView convertPoint:rightBottomPoint toCoordinateFromView:_mapView];
    
    MAMapPoint p1 = MAMapPointForCoordinate(leftTopCoordinate);
    MAMapPoint p2 = MAMapPointForCoordinate(rightBottomCoordinate);
    
    CLLocationDistance distance =  MAMetersBetweenMapPoints(p1, p2);
    self.stationRadius = [NSString stringWithFormat:@"%d",(int)distance/2];
    if (distance/2>700) {
        self.stationRadius = @"700";
    } else {
        self.stationRadius = [NSString stringWithFormat:@"%d",(int)distance/2];
    }
    
    NSLog(@"哈哈哈哈哈哈啊哈哈哈哈哈哈%@",self.stationRadius);
    
    //中心点经纬度
    CGPoint centerPoint = _mapView.center;
    _centerCoordinate = [_mapView convertPoint:centerPoint toCoordinateFromView:_mapView];
    LocationTransform *beforeLocation = [[LocationTransform alloc] initWithLatitude:_centerCoordinate.latitude andLongitude:_centerCoordinate.longitude];
    //高德转化为GPS
    LocationTransform *afterLocation = [beforeLocation transformFromGDToGPS];
    
    if (!_carAnnoView.selected) {
        if ([self.delegate respondsToSelector:@selector(userMoveMapViewEnd:withRadius:)]) {
            [self.delegate userMoveMapViewEnd:afterLocation withRadius:self.stationRadius];
        }
    }
}

//地图移动结束
- (void)mapView:(MAMapView *)mapView mapDidMoveByUser:(BOOL)wasUserAction {
    
    if (wasUserAction==YES) {
        
        NSLog(@"用户移动地图结束");
        
        CGPoint centerPoint = _mapView.center;
        
        _centerCoordinate = [_mapView convertPoint:centerPoint toCoordinateFromView:_mapView];
        
        NSLog(@"屏幕中心点经纬度：%f %f",_centerCoordinate.latitude,_centerCoordinate.longitude);
        
        LocationTransform *beforeLocation = [[LocationTransform alloc] initWithLatitude:_centerCoordinate.latitude andLongitude:_centerCoordinate.longitude];
        //高德转化为GPS
        LocationTransform *afterLocation = [beforeLocation transformFromGDToGPS];
        
        if ([self.delegate respondsToSelector:@selector(userMoveMapViewEnd:withRadius:)]) {
            [self.delegate userMoveMapViewEnd:afterLocation withRadius:self.stationRadius];
        }
    }
}

//设置标注图
-(MAAnnotationView *)mapView:(MAMapView *)mapView viewForAnnotation:(id<MAAnnotation>)annotation{
    
    if ([annotation isKindOfClass:[MAUserLocation class]]) //自定义定位标注样式
    {
        static NSString *userAnnotationIdentifer = @"userAnnotationIdentifer";
        MAAnnotationView *userView = (MAAnnotationView*)[mapView dequeueReusableAnnotationViewWithIdentifier:userAnnotationIdentifer];
        if (userView == nil)
        {
            userView = [[MAAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:userAnnotationIdentifer];
        }
        userView.image = [UIImage imageNamed:@"img_Location"];
        return userView;
    }
    
    if ([annotation isKindOfClass:[CarPointAnnotation class]]) { //自定义站点标注
        static NSString *reuseIndetifier = @"annotationReuseIndetifier";
        CarAnnotationView *annotationView = (CarAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:reuseIndetifier];
        if (annotationView == nil) {
            annotationView = [[CarAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:reuseIndetifier];
        }
        
        if (_stationArr.count==0&&isShowCar==NO) {
            
            _carAnnoView = annotationView;
            [self selectAnnoAnimation];
            
//            _carAnnoView.loadImgView.hidden = YES;
//            [_carAnnoView.loadImgView stopAnimating]; //停止加载
//            _carAnnoView.countLab.hidden = YES;
//            _carAnnoView.imgView.image = [UIImage imageNamed:@"img_LatPointSelect"];
//            /*创建弹性动画
//             damping:阻尼，范围0-1，阻尼越接近于0，弹性效果越明显
//             velocity:弹性复位的速度
//             */
////            [UIView animateWithDuration:0.3 delay:0.0 usingSpringWithDamping:0.2 initialSpringVelocity:5.0 options:UIViewAnimationOptionCurveLinear animations:^{
//                _carAnnoView.imgView.frame = CGRectMake(autoScaleW(1), autoScaleW(-3), autoScaleW(46), autoScaleW(52));
////            } completion:nil];
            
            isShowCar = YES;
        }
        
        CarPointAnnotation *pointAnno = (CarPointAnnotation *)annotation;
        annotationView.item = pointAnno.item;
        
        //设置为NO，用以调用自定义的calloutView
        annotationView.canShowCallout = NO;
        
        //设置中心点偏移，使得标注底部中间点成为经纬度对应点
        annotationView.centerOffset = CGPointMake(autoScaleW(4), autoScaleW(-24));
        
        return annotationView;
    }
    
    if ([annotation isKindOfClass:[MAPointAnnotation class]])
    {
        static NSString *routePlanningCellIdentifier = @"RoutePlanningCellIdentifier";
        
        MAAnnotationView *poiAnnotationView = (MAAnnotationView*)[_mapView dequeueReusableAnnotationViewWithIdentifier:routePlanningCellIdentifier];
        if (poiAnnotationView == nil)
        {
            poiAnnotationView = [[MAAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:routePlanningCellIdentifier];
        }
        poiAnnotationView.canShowCallout = YES;
        poiAnnotationView.image = [UIImage imageNamed:@"img_BluePoint"];
        
        return poiAnnotationView;
    }
    
    return nil;
}

//选中标注触发方法
- (void)mapView:(MAMapView *)mapView didSelectAnnotationView:(MAAnnotationView *)view {
    
    if (_forbidAnnoClick==YES) {
        return;
    }
    
    if ([view isKindOfClass:[CarAnnotationView class]]) {
        
        //获取站点数据
        CarPointAnnotation *pointAnno = (CarPointAnnotation *)view.annotation;
        StationItem *item = pointAnno.item;
        NSLog(@"选中站点ID：%@",item.stationId);
        
        _stationItem = item;
        _carAnnoView = (CarAnnotationView *)view;
        _carAnnoView.loadImgView.hidden = NO;
        [APPUtil runAnimationWithCount:19 name:@"motion_loading00" imageView:_carAnnoView.loadImgView repeatCount:0 animationDuration:0.03]; //开始加载
        
        NSArray *allkeys = [_carSelectedAnnoDic allKeys];
        
        for (int i=0;i<allkeys.count;i++) {
            
            NSString *key = allkeys[i];
            
            if (![key isEqualToString:[NSString stringWithFormat:@"%@;%@",item.stationId,item.vehicleCnt]]) {
                CarAnnotationView *anno = [_carSelectedAnnoDic objectForKey:key];
                [anno.loadImgView performSelector:@selector(setAnimationImages:) withObject:nil afterDelay:0];
                anno.loadImgView.hidden = YES;
                
                NSArray *array = [key componentsSeparatedByString:@";"];
                anno.countLab.text = array[1];
            }
        }
        
        [_carSelectedAnnoDic removeAllObjects];
        [_carSelectedAnnoDic setObject:_carAnnoView forKey:[NSString stringWithFormat:@"%@;%@",item.stationId,item.vehicleCnt]];
        
        
#pragma mark - 获取站点可租车辆列表
        
        NSDictionary *paramDic = [NSDictionary dictionaryWithObjectsAndKeys:@"2",@"paging",
                                  item.stationId,@"stationId",nil];
        
        [[CommonRequest shareRequest] requestWithPost:getStationCarListUrl()isCovered:NO parameters:paramDic success:^(id data) {
            
            //路径规划
            _startCoordinate = _userLocation.coordinate;
            _destinationCoordinate = CLLocationCoordinate2DMake([item.gpsLat doubleValue], [item.gpsLng doubleValue]);
            /* 提供备选方案*/
            _navi.multipath = 1;
            /* 出发点. */
            _navi.origin = [AMapGeoPoint locationWithLatitude:_startCoordinate.latitude longitude:_startCoordinate.longitude];
            /* 目的地. */
            _navi.destination = [AMapGeoPoint locationWithLatitude:_destinationCoordinate.latitude longitude:_destinationCoordinate.longitude];
            [_search AMapWalkingRouteSearch:_navi];
            
            NSDictionary *result = data;
            NSArray *carArr = [NSArray yy_modelArrayWithClass:[CarItem class] json:result[@"result"][@"list"]];
            
            if ([self.delegate respondsToSelector:@selector(selectAnnotationView:andCarArr:)]) {
                [self.delegate selectAnnotationView:item andCarArr:[carArr mutableCopy]];
            }
            
        } failure:^(NSString *code) {
            [_carAnnoView.loadImgView performSelector:@selector(setAnimationImages:) withObject:nil afterDelay:0];
            _carAnnoView.loadImgView.hidden = YES;
            
            if ([APPUtil isBlankString:item.vehicleCnt] || [item.vehicleCnt isEqualToString:@"0"]) {
                _carAnnoView.countLab.hidden = YES;
            } else {
                _carAnnoView.countLab.hidden = NO;
                _carAnnoView.countLab.text = item.vehicleCnt;
            }
        }];
    }
}

//显示车的路线规划
- (void)showCarRoute:(BookingItem *)item {
    
    //路径规划
    _startCoordinate = _userLocation.coordinate;
    
    //GPS转化为高德
    LocationTransform *beforeLocation = [[LocationTransform alloc] initWithLatitude:[item.gpsLat doubleValue] andLongitude:[item.gpsLng doubleValue]];
    LocationTransform *afterLocation = [beforeLocation transformFromGPSToGD];
    item.gpsLat = [NSString stringWithFormat:@"%f",afterLocation.latitude];
    item.gpsLng = [NSString stringWithFormat:@"%f",afterLocation.longitude];
    
    _destinationCoordinate = CLLocationCoordinate2DMake([item.gpsLat doubleValue], [item.gpsLng doubleValue]);
    /* 提供备选方案*/
    _navi.multipath = 1;
    /* 出发点. */
    _navi.origin = [AMapGeoPoint locationWithLatitude:_startCoordinate.latitude longitude:_startCoordinate.longitude];
    /* 目的地. */
    _navi.destination = [AMapGeoPoint locationWithLatitude:_destinationCoordinate.latitude longitude:_destinationCoordinate.longitude];
    [_search AMapWalkingRouteSearch:_navi];
    
    if (_stationArr.count==0) {
        [_mapView removeAnnotations:_carAnnoArr];
        [_carAnnoArr removeAllObjects];
        [_mapView removeAnnotation:_anno];
        _anno = [[CarPointAnnotation alloc] init];
        _anno.coordinate = CLLocationCoordinate2DMake(_destinationCoordinate.latitude,_destinationCoordinate.longitude);
        _anno.item = _stationItem;
        //将大头针添加到地图中
        [_mapView addAnnotation:_anno];
    }
    
}

//移除选中标注
- (void)removeSelectAnno {
    if (_anno) {
        [_mapView removeAnnotation:_anno];
    }
}

//移除所有标注
- (void)removeAllAnnos {
    
    [_mapView removeAnnotations:_carAnnoArr];
    [_carAnnoArr removeAllObjects];
}

//取消选中标注触发方法
- (void)mapView:(MAMapView *)mapView didDeselectAnnotationView:(MAAnnotationView *)view {
    
    if (_forbidAnnoClick==YES) {
        return;
    }
    
    _carAnnoView.imgView.frame = CGRectMake(autoScaleW(2), autoScaleW(7), autoScaleW(44), autoScaleW(50));
    
    if ([APPUtil isBlankString:_stationItem.vehicleCnt] || [_stationItem.vehicleCnt isEqualToString:@"0"]) {
        _carAnnoView.countLab.hidden = YES;
        _carAnnoView.imgView.image = [UIImage imageNamed:@"img_LatPoint_none"];
    } else {
        _carAnnoView.countLab.hidden = NO;
        _carAnnoView.countLab.text = _stationItem.vehicleCnt;
        _carAnnoView.imgView.image = [UIImage imageNamed:@"img_LatPoint"];
    }
    
    if ([self.delegate respondsToSelector:@selector(deselectAnnotationView)]) {
        [self.delegate deselectAnnotationView];
    }
}

#pragma mark - AMapSearchDelegate 代理

/* 路径规划搜索回调. */
- (void)onRouteSearchDone:(AMapRouteSearchBaseRequest *)request response:(AMapRouteSearchResponse *)response
{
    if (response.route == nil || response.count<=0)
    {
        [_carAnnoView.loadImgView performSelector:@selector(setAnimationImages:) withObject:nil afterDelay:0];
        _carAnnoView.loadImgView.hidden = YES;
        
        if ([APPUtil isBlankString:_stationItem.vehicleCnt] || [_stationItem.vehicleCnt isEqualToString:@"0"]) {
            _carAnnoView.countLab.hidden = YES;
        } else {
            _carAnnoView.countLab.hidden = NO;
            _carAnnoView.countLab.text = _stationItem.vehicleCnt;
        }
        
        [self selectAnnoAnimation]; //选中标注动画
        
        if ([self.delegate respondsToSelector:@selector(routeSearchFail)]) {
            [self.delegate routeSearchFail];
        }
        
        return;
    }
    
    //解析response获取路径信息
    _route = response.route;
    
    if (response.count > 0)
    {
        /* 清空地图上已有的路线. */
        [_naviRoute removeFromMapView];
        /* 展示当前路线方案. */
        MANaviAnnotationType type = MANaviAnnotationTypeWalking;
        _naviRoute = [MANaviRoute naviRouteForPath:_route.paths[0] withNaviType:type showTraffic:YES startPoint:[AMapGeoPoint locationWithLatitude:_startCoordinate.latitude longitude:_startCoordinate.longitude] endPoint:[AMapGeoPoint locationWithLatitude:_destinationCoordinate.latitude longitude:_destinationCoordinate.longitude]];
        [_naviRoute addToMapView:_mapView];
        
        [self selectAnnoAnimation]; //选中标注动画
        
        if ([self.delegate respondsToSelector:@selector(routeSearchSuccess)]) {
            [self.delegate routeSearchSuccess];
        }
    }
}

- (void)AMapSearchRequest:(id)request didFailWithError:(NSError *)error
{
    NSLog(@"Error: %@ - %@", error, [ErrorInfoUtility errorDescriptionWithCode:error.code]);
}

- (MAOverlayRenderer *)mapView:(MAMapView *)mapView rendererForOverlay:(id<MAOverlay>)overlay
{
    if ([overlay isKindOfClass:[LineDashPolyline class]])
    {
        MAPolylineRenderer *polylineRenderer = [[MAPolylineRenderer alloc] initWithPolyline:((LineDashPolyline *)overlay).polyline];
        
        polylineRenderer.lineWidth = autoScaleW(6);
        polylineRenderer.strokeColor = UIColorFromARGB(0x008FFF,0.7);
        polylineRenderer.lineDash = NO;
        
        return polylineRenderer;
    }
    if ([overlay isKindOfClass:[MANaviPolyline class]])
    {
        MANaviPolyline *naviPolyline = (MANaviPolyline *)overlay;
        MAPolylineRenderer *polylineRenderer = [[MAPolylineRenderer alloc] initWithPolyline:naviPolyline.polyline];
        
        polylineRenderer.lineWidth = autoScaleW(6);
        polylineRenderer.lineJoinType = kMALineJoinRound;
        polylineRenderer.strokeColor = UIColorFromARGB(0x008FFF,0.7);
        
        return polylineRenderer;
    }
    if ([overlay isKindOfClass:[MAMultiPolyline class]])
    {
        MAMultiColoredPolylineRenderer * polylineRenderer = [[MAMultiColoredPolylineRenderer alloc] initWithMultiPolyline:overlay];
        
        polylineRenderer.lineWidth = 6;
        polylineRenderer.strokeColors = [_naviRoute.multiPolylineColors copy];
        polylineRenderer.gradient = YES;
        
        return polylineRenderer;
    }
    
    return nil;
}

//设置百米精确度
-(void)setLocationManagerForHundredMeters{
    
    //1.带逆地理信息的一次定位（返回坐标和地址信息）
    [_locationManager setDesiredAccuracy:kCLLocationAccuracyHundredMeters];
    
    //2.定位超时时间，最低2s，此处设置为2s
    _locationManager.locationTimeout =2;
    
    //3.逆地理请求超时时间，最低2s，此处设置为2s
    _locationManager.reGeocodeTimeout = 2;
}

//设置十米精确度
-(void)setLocationManagerForAccuracyBest{
    
    //1.带逆地理信息的一次定位（返回坐标和地址信息）
    [_locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
    
    //2定位超时时间，最低2s，此处设置为10s
    _locationManager.locationTimeout =10;
    
    //3.逆地理请求超时时间，最低2s，此处设置为10s
    _locationManager.reGeocodeTimeout = 10;
}

- (void)setStationItem:(StationItem *)stationItem {
    
    if (_stationItem != stationItem) {
        _stationItem = stationItem;
    }
    
    isShowCar = NO;
}

- (void)setStationArr:(NSMutableArray *)stationArr {
    
    if (_stationArr != stationArr) {
        _stationArr = stationArr;
    }
    
    [_mapView removeAnnotations:_carAnnoArr];
    [_carAnnoArr removeAllObjects];
    
    for (int i = 0; i<_stationArr.count; i++) {
        StationItem *item = _stationArr[i];
        CarPointAnnotation *anno = [[CarPointAnnotation alloc] init];
        
        //GPS转化为高德
        LocationTransform *beforeLocation = [[LocationTransform alloc] initWithLatitude:[item.gpsLat doubleValue] andLongitude:[item.gpsLng doubleValue]];
        LocationTransform *afterLocation = [beforeLocation transformFromGPSToGD];
        item.gpsLat = [NSString stringWithFormat:@"%f",afterLocation.latitude];
        item.gpsLng = [NSString stringWithFormat:@"%f",afterLocation.longitude];
        
        anno.coordinate = CLLocationCoordinate2DMake([item.gpsLat doubleValue],[item.gpsLng doubleValue]);
        
        anno.item = item;
        //将大头针添加到地图中
        [_mapView addAnnotation:anno];
        [_carAnnoArr addObject:anno];
    }
}

//选择标注动画
- (void)selectAnnoAnimation {
    
    _carAnnoView.loadImgView.hidden = YES;
    [_carAnnoView.loadImgView stopAnimating]; //停止加载
    _carAnnoView.countLab.hidden = YES;
    _carAnnoView.imgView.image = [UIImage imageNamed:@"img_LatPointSelect"];
    /*创建弹性动画
     damping:阻尼，范围0-1，阻尼越接近于0，弹性效果越明显
     velocity:弹性复位的速度
     */
    [UIView animateWithDuration:0.3 delay:0.0 usingSpringWithDamping:0.2 initialSpringVelocity:5.0 options:UIViewAnimationOptionCurveLinear animations:^{
        _carAnnoView.imgView.frame = CGRectMake(autoScaleW(1), autoScaleW(-3), autoScaleW(46), autoScaleW(52));
    } completion:nil];
}

- (void)mapRouteLarge:(NSMutableArray *)array {
    
    if (array.count>0) {
        [_mapView setVisibleMapRect:[CommonUtility mapRectForOverlays:_naviRoute.routePolylines] edgePadding:UIEdgeInsetsMake(autoScaleW(80), autoScaleW(50), autoScaleH(360), autoScaleW(50)) animated:YES];
    } else {
        [_mapView setVisibleMapRect:[CommonUtility mapRectForOverlays:_naviRoute.routePolylines] edgePadding:UIEdgeInsetsMake(autoScaleW(80), autoScaleW(50), autoScaleH(150), autoScaleW(50)) animated:YES];
    }
}

- (void)setDelegate {
    _mapView.showsUserLocation = YES;
    _mapView.delegate = self;
    _locationManager.delegate = self;
}

- (void)clearDelegate {
    _mapView.showsUserLocation = NO;
    _mapView.delegate = nil;
    _locationManager.delegate = nil;
}

@end
